#!/usr/bin/env bash
#set -v
# 131072000 = 100 mb + 25%
if [ $# -ne 1 ];then
    echo "You need to pass a file size in bytes as first argument."
    exit 1
fi
BASEDIR=$(dirname $0)
service_broker_name="db-dumper-service-acceptance"
service_name="acceptance_test"
filepath="fakedata_$1.sql"
WD=`pwd`
mysql_bin_path="${WD}/src/main/resources/binaries/mysql/bin/mysql"
mysqldump_bin_path="${WD}/src/main/resources/binaries/mysql/bin/mysqldump"
push_data_app_dir="${BASEDIR}/acceptance_app/push_data"
push_data_app_name="db-dumper-push-data"

diff_data_app_dir="${BASEDIR}/acceptance_app/diff_database"
diff_data_app_name="db-dumper-diff-data"

jq_path="jq"
hash mysql 2>/dev/null || { echo "Mysql is required to run acceptance test"; exit 1; }
hash jq 2>/dev/null || { $BASEDIR/install_jq > /dev/null ; jq_path="./jq"; }

if [ ! -f "$mysql_bin_path" ] || [ ! -f "$mysqldump_bin_path" ]; then
    echo "Please install binaries for mysql first (You can use bin/install-binaries)"
    exit 1
fi

if [ ! -f "$filepath" ]; then
    echo "Creating fake data..."
    $BASEDIR/create_fake_data "$1" "$filepath"
    echo "Fake data have been created."
    echo ""
fi

get_push_data_state () {
    if hash curl 2>/dev/null; then
        RESPONSE=`curl $1 2> /dev/null`
    else
        RESPONSE=`wget -O - "$1" 2> /dev/null`
    fi
    if [ "$RESPONSE" != "1" ] && [ "$RESPONSE" != "0" ]; then
        echo "Error: $RESPONSE"
        exit 1
    fi
    return "$RESPONSE"
}

echo "Deploying db-dumper-service..."
$BASEDIR/deploy
echo "Deployed."
echo ""

echo "Registering a temporary service of db-dumper-service..."
$BASEDIR/target
source $BASEDIR/user
cf create-service-broker $service_broker_name myUs3r myPasssw0rd $SERVICE_URL
cf enable-service-access db-dumper-service -o $AVAILABLE_ON_ORG
echo "Registered."
echo ""

echo "Creating service source database..."
cf cs p-mysql 1gb source_db_dumper_acceptance
cf create-service-key source_db_dumper_acceptance mykey
echo "Created."
echo ""

echo "Creating service target database..."
cf cs p-mysql 1gb target_db_dumper_acceptance
cf create-service-key target_db_dumper_acceptance mykey
echo "Created."
echo ""

echo "Pushing data in source database..."
rm -f "$push_data_app_dir"/fakedata*
cp "$mysql_bin_path" "$push_data_app_dir"
cp "$mysqldump_bin_path" "$diff_data_app_dir"
cp "$filepath" "$push_data_app_dir"
service_source_value=`cf service-key source_db_dumper_acceptance mykey | awk 'FNR > 1'`

service_target_value=`cf service-key target_db_dumper_acceptance mykey | awk 'FNR > 1'`


port=`echo $service_source_value | $jq_path '.port'`
hostname=`echo $service_source_value | $jq_path .hostname`
database_name=`echo $service_source_value | $jq_path .name`
username=`echo $service_source_value | $jq_path .username`
password=`echo $service_source_value | $jq_path .password`
uri_database_source=`echo $service_source_value | $jq_path .uri`

port_target=`echo $service_target_value | $jq_path '.port'`
hostname_target=`echo $service_target_value | $jq_path .hostname`
database_name_target=`echo $service_target_value | $jq_path .name`
username_target=`echo $service_target_value | $jq_path .username`
password_target=`echo $service_target_value | $jq_path .password`
uri_database_target=`echo $service_target_value | $jq_path .uri`

cf push "$push_data_app_name" -p "$push_data_app_dir" -b php_buildpack --no-manifest -c "\$HOME/htdocs/push_data $hostname $port $username $password $database_name $filepath & .bp/bin/start"

app_url=`cf a | awk -v search="$push_data_app_name" '$0 ~ search { print $6 }'`

printf "App is pushing wait for it..."
while :
do
    get_push_data_state "$app_url"
    state=$?
    if [ "$state" == "1" ]; then
        printf "Over.\n"
        break
    fi
    printf "."
    sleep 2
done
printf "\n"
if [ "$state" != "1" ]; then
    echo "Error occurred when pushing data:"
    echo "$state"
    exit 1
fi
cf d "$push_data_app_name" -f
echo "Data have been pushed."
echo ""

echo "Dumping with db-dumper-service..."
cf cs db-dumper-service experimental "$service_name" -c "{\"src_url\": ${uri_database_source}}"
printf "Wait for dump with db-dumper-service..."
while :
do
    state=`cf service "$service_name" | awk '/Status: create succeeded/ { print "1" }'`
    if [ "$state" == "1" ]; then
        printf "Over.\n"
        break
    fi
    printf "."
    sleep 1
done
echo ""
echo "Dump finished."
echo ""

echo "Restoring in target database"
cf update-service acceptance_test -c "{\"target_url\": ${uri_database_target}, \"action\": \"restore\"}"
printf "Wait for restore with db-dumper-service..."
while :
do
    state=`cf service "$service_name" | awk '/Status: update succeeded/ { print "1" }'`
    if [ "$state" == "1" ]; then
        printf "Over.\n"
        break
    fi
    printf "."
    sleep 1
done
echo ""
echo "Restore finished."
echo ""

echo "Running test..."
cf push "$diff_data_app_name" -p "$diff_data_app_dir" -b php_buildpack --no-manifest -c "\$HOME/htdocs/diff_data $hostname $port $username $password $database_name $hostname_target $port_target $username_target $password_target $database_name_target &> diff_data.log & .bp/bin/start"

app_url=`cf a | awk -v search="$diff_data_app_name" '$0 ~ search { print $6 }'`

printf "App is testing..."
while :
do
    get_push_data_state "$app_url"
    state=$?
    if [ "$state" != "0" ]; then
        printf "Over.\n"
        break
    fi
    printf "."
    sleep 2
done
cf d "$diff_data_app_name" -f

if [ "$state" == "1" ]; then
    RESULT="0"
else
    RESULT="1"
fi

echo ""
echo "Test is finished, wait for cleaning to have result."
echo ""


echo "Deleting service $service_name instance..."
cf ds "$service_name" -f
echo "Deleted."
echo ""

echo "Deleting service source database..."
cf delete-service-key source_db_dumper_acceptance mykey -f
cf ds source_db_dumper_acceptance -f
echo "Deleted."
echo ""

echo "Deleting service target database..."
cf delete-service-key target_db_dumper_acceptance mykey -f
cf ds target_db_dumper_acceptance -f
echo "Deleted."
echo ""

# cf delete-service-broker db-dumper-service-acceptance -f
echo "Unregistering the temporary service..."
$BASEDIR/target
source $BASEDIR/user
cf delete-service-broker $service_broker_name -f
echo "Unregistered."
echo ""

printf "Result for a file of $1 bytes: "

if [ "$RESULT" == "0" ]; then
    printf "\033[0;32m"
    printf "OK\n"
    printf "\033[0m"
else
    printf "\033[0;31m"
    printf "NOK\n"
    printf "\033[0m"
fi
exit $RESULT