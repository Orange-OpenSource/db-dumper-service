#!/usr/bin/env bash
WD=`pwd`
echo "Restoring all binaries..."
echo ""

mysql_version="5.7.11"
mysql_global_version="5.7"
mariadb_version="10.1.14"
mongodb_version="3.3.2"
postgresql_version="9.5.1"
#####################################################################################
#mysql
#####################################################################################
if [ "$1" == "--prefer-mysql" ]; then
    fileurl="http://dev.mysql.com/get/Downloads/MySQL-${mysql_global_version}/mysql-${mysql_version}-linux-glibc2.5-x86_64.tar.gz"
    filepath="mysql-${mysql_version}-linux-glibc2.5-x86_64.tar.gz"
    finalfile="mysql-${mysql_version}-linux-glibc2.5-x86_64"
    echo "Installing mysql dump and restore binaries..."
    if hash curl 2>/dev/null; then
        RESPONSE=$(curl --write-out %{http_code} -L -o "${filepath}" "$fileurl")
    else
        wget -o "${filepath}" "$fileurl"
        RESPONSE=$?
    fi
    if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "0" ]; then
        echo "File ${fileurl} not found, so it can't be downloaded."
        rm "$filepath"
        exit 1
    fi
    mkdir -p "${WD}/src/main/resources/binaries/mysql/bin"
    tar -zxf "$filepath"
    cp "$finalfile/bin/mysql" "${WD}/src/main/resources/binaries/mysql/bin"
    cp "$finalfile/bin/mysqldump" "${WD}/src/main/resources/binaries/mysql/bin"
    rm -Rf "$finalfile"
    rm "$filepath"
else
    fileurl="http://nyc2.mirrors.digitalocean.com/mariadb/mariadb-${mariadb_version}/bintar-linux-glibc_214-x86_64/mariadb-${mariadb_version}-linux-glibc_214-x86_64.tar.gz"
    filepath="mariadb-${mariadb_version}-linux-glibc_214-x86_64.tar.gz"
    finalfile="mariadb-${mariadb_version}-linux-glibc_214-x86_64"
    echo "Installing mysql dump and restore binaries from mariadb. "
    echo -e "\033[1;34mNote:\033[1;0m use arg '--prefer-mysql' to use one from oracle, mariadb has binaries more reliable and is the most used \"mysql\" database."
    if hash curl 2>/dev/null; then
        RESPONSE=$(curl --write-out %{http_code} -L -o "${filepath}" "$fileurl")
    else
        wget -o "${filepath}" "$fileurl"
        RESPONSE=$?
    fi
    if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "0" ]; then
        echo "File ${fileurl} not found, so it can't be downloaded."
        rm "$filepath"
        exit 1
    fi
    mkdir -p "${WD}/src/main/resources/binaries/mysql/bin"
    tar -zxf "$filepath"
    cp "$finalfile/bin/mysql" "${WD}/src/main/resources/binaries/mysql/bin"
    cp "$finalfile/bin/mysqldump" "${WD}/src/main/resources/binaries/mysql/bin"
    rm -Rf "$finalfile"
    rm "$filepath"
fi
echo -e "Done installing mysql binaries."

#####################################################################################
#mongodb
#####################################################################################
fileurl="https://github.com/ArthurHlt/mongo-tools/releases/download/r3.3.2-targetdb/mongodb-linux-x86_64-${mongodb_version}.tgz"
filepath="mongodb-linux-x86_64-${mongodb_version}.tgz"
finalfile="mongodb-linux-x86_64-${mongodb_version}"
echo "Installing mongodb dump and restore binaries..."
if hash curl 2>/dev/null; then
    RESPONSE=$(curl --write-out %{http_code} -L -o "${filepath}" "$fileurl")
else
    wget -o "${filepath}" "$fileurl"
    RESPONSE=$?
fi
if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "0" ]; then
    echo "File ${fileurl} not found, so it can't be downloaded."
    rm "$filepath"
    exit 1
fi
mkdir -p "${WD}/src/main/resources/binaries/mongodb/bin"
mkdir $finalfile && tar -zxf "$filepath" -C $finalfile # tar -zxvf "$filepath"
cp "$finalfile/bin/mongodump" "${WD}/src/main/resources/binaries/mongodb/bin"
cp "$finalfile/bin/mongorestore" "${WD}/src/main/resources/binaries/mongodb/bin"
rm -Rf "$finalfile"
rm "$filepath"
echo "Done installing mongodb binaries."
#####################################################################################
#postgresql
#####################################################################################
ARCHNUM=`getconf LONG_BIT`
if [[ "$ARCHNUM" != "64" ]]; then
    echo "you must be on linux 64"
    exit 1
fi
fileurl="https://ftp.postgresql.org/pub/source/v${postgresql_version}/postgresql-${postgresql_version}.tar.gz"
filepath="postgresql-${postgresql_version}.tar.gz"
finalfile="postgresql-${postgresql_version}"
echo "Installing postgresql dump and restore binaries..."
if hash curl 2>/dev/null; then
    RESPONSE=$(curl --write-out %{http_code} -L -o "${filepath}" "$fileurl")
else
    wget -o "${filepath}" "$fileurl"
    RESPONSE=$?
fi
if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "0" ]; then
    echo "File ${fileurl} not found, so it can't be downloaded."
    rm "$filepath"
    exit 1
fi
mkdir -p "${WD}/src/main/resources/binaries/postgresql/bin"
mkdir -p "${WD}/src/main/resources/binaries/postgresql/lib"
tar -zxf "$filepath"
cd "$finalfile"
./configure --without-readline > /dev/null
make > /dev/null
sudo make install > /dev/null
cd -
cd /usr/local/pgsql
sudo cp -Rf "lib/" "${WD}/src/main/resources/binaries/postgresql"
sudo cp "bin/pg_dump" "${WD}/src/main/resources/binaries/postgresql/bin"
sudo cp "bin/pg_restore" "${WD}/src/main/resources/binaries/postgresql/bin"
sudo cp "bin/psql" "${WD}/src/main/resources/binaries/postgresql/bin"
sudo cp "bin/pg_dumpall" "${WD}/src/main/resources/binaries/postgresql/bin"
cd -
rm -Rf "$finalfile"
rm "$filepath"
echo "Done installing postgresql binaries."

#####################################################################################
#rutil - redis tool to restore and dump
#####################################################################################
echo "Installing redis dump and restore tool (rutil)..."
go get -v github.com/pampa/rutil
mkdir -p "${WD}/src/main/resources/binaries/redis/bin"
sudo cp "${GOPATH}/bin/rutil" "${WD}/src/main/resources/binaries/redis/bin"
echo "Done installing redis tool."


echo ""
echo "Binaries are installed."